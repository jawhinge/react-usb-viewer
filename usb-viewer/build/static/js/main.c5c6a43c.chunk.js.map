{"version":3,"sources":["components/Navigation.js","components/HubView.js","components/BusView.js","components/FlatView.js","components/TypeView.js","components/Devices.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","props","Navbar","bg","variant","expand","Container","Brand","href","Toggle","Collapse","id","Nav","className","onSelect","selectedKey","onChangeView","Link","eventKey","HubView","devices","map","device","isHub","Accordion","defaultActiveKey","Item","Header","deviceName","portNumbers","busNumber","Body","deviceDescriptor","idProduct","idVendor","manufacturer","children","child","isChild","BusView","xs","key","buses","busesTemp","reduce","rv","x","push","property","bus","FlatView","TypeView","types","typesTemp","type","Devices","view","useState","setDevices","listening","setListening","useEffect","axios","get","then","res","data","catch","err","console","log","EventSource","onmessage","event","parsedData","JSON","parse","viewType","Row","Alert","App","setviewType","newView","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5c6a43c.chunk.js","sourcesContent":["import Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nfunction Navigation(props) {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#home\">USB Viewer</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"me-auto\" onSelect={(selectedKey) => props.onChangeView(selectedKey)}>\r\n            <Nav.Link eventKey=\"hub\">Hub View</Nav.Link>\r\n            <Nav.Link eventKey=\"type\">Type View</Nav.Link>\r\n            <Nav.Link eventKey=\"bus\">Bus View</Nav.Link>\r\n            <Nav.Link eventKey=\"flat\">Flat View</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import Accordion from \"react-bootstrap/Accordion\";\r\n\r\nfunction HubView(props) {\r\n  return (\r\n    <>\r\n      {props.devices.map((device) => {\r\n        if (device.isHub === true)\r\n          return (\r\n            <Accordion defaultActiveKey=\"0\">\r\n              <Accordion.Item eventKey=\"0\">\r\n                <Accordion.Header>\r\n                  {device.deviceName} - At Port {device.portNumbers}, Bus {device.busNumber}\r\n                </Accordion.Header>\r\n                <Accordion.Body>\r\n                  <p>\r\n                    <strong>Product ID: </strong>{\" \"}\r\n                    {device.deviceDescriptor.idProduct}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Vendor ID: </strong>\r\n                    {device.deviceDescriptor.idVendor}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Bus: </strong>\r\n                    {device.busNumber}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Port: </strong>\r\n                    {device.portNumbers}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Descriptor: </strong>\r\n                    {device.manufacturer}\r\n                  </p>\r\n                  {device.children.map((child) => (\r\n                    <Accordion>\r\n                      <Accordion.Item eventKey=\"0\">\r\n                        <Accordion.Header>{child.deviceName}</Accordion.Header>\r\n                        <Accordion.Body>\r\n                          <p>\r\n                            <strong>Product ID: </strong>{\" \"}\r\n                            {child.deviceDescriptor.idProduct}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Vendor ID: </strong>\r\n                            {child.deviceDescriptor.idVendor}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Bus: </strong>\r\n                            {child.busNumber}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Port: </strong>\r\n                            {child.portNumbers[0]} - {child.portNumbers[1]}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Descriptor: </strong>\r\n                            {child.manufacturer}\r\n                          </p>\r\n                        </Accordion.Body>\r\n                      </Accordion.Item>\r\n                    </Accordion>\r\n                  ))}\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>\r\n          );\r\n        if (device.isHub === false && device.isChild === false)\r\n          return (\r\n            <Accordion defaultActiveKey=\"0\">\r\n              <Accordion.Item eventKey=\"0\">\r\n                <Accordion.Header>\r\n                  {device.deviceName} - At Port {device.portNumbers}, Bus {device.busNumber}\r\n                </Accordion.Header>\r\n                <Accordion.Body>\r\n                  <p>\r\n                    <strong>Product ID: </strong>{\" \"}\r\n                    {device.deviceDescriptor.idProduct}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Vendor ID: </strong>\r\n                    {device.deviceDescriptor.idVendor}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Bus: </strong>\r\n                    {device.busNumber}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Port: </strong>\r\n                    {device.portNumbers}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Descriptor: </strong>\r\n                    {device.manufacturer}\r\n                  </p>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>\r\n          );\r\n        return true;\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HubView;\r\n","import Accordion from \"react-bootstrap/Accordion\";\r\n\r\nfunction BusView(props) {\r\n  //stole this from SO, don't ask me about it\r\n  var groupBy = function (xs, key) {\r\n    return xs.reduce(function (rv, x) {\r\n      (rv[x[key]] = rv[x[key]] || []).push(x);\r\n      return rv;\r\n    }, {});\r\n  };\r\n\r\n  let buses = [];\r\n  let busesTemp = groupBy(props.devices, \"busNumber\");\r\n  for (const property in busesTemp) {\r\n    buses.push({ busNumber: property, devices: busesTemp[property] });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {buses.map((bus) => (\r\n        <Accordion defaultActiveKey=\"0\">\r\n          <Accordion.Item eventKey=\"0\">\r\n            <Accordion.Header>Bus Number {bus.busNumber}</Accordion.Header>\r\n            <Accordion.Body>\r\n              {bus.devices.map((child) => (\r\n                <Accordion>\r\n                  <Accordion.Item eventKey=\"0\">\r\n                    <Accordion.Header>{child.deviceName}</Accordion.Header>\r\n                    <Accordion.Body>\r\n                      <p>\r\n                        <strong>Product ID: </strong>{\" \"}\r\n                        {child.deviceDescriptor.idProduct}\r\n                      </p>\r\n                      <p>\r\n                        <strong>Vendor ID: </strong>\r\n                        {child.deviceDescriptor.idVendor}\r\n                      </p>\r\n                      <p>\r\n                        <strong>Port: </strong>\r\n                        {child.portNumbers[0]}\r\n                      </p>\r\n                      <p>\r\n                        <strong>Descriptor: </strong>\r\n                        {child.manufacturer}\r\n                      </p>\r\n                    </Accordion.Body>\r\n                  </Accordion.Item>\r\n                </Accordion>\r\n              ))}\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n        </Accordion>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BusView;\r\n","import Accordion from \"react-bootstrap/Accordion\";\r\n\r\nfunction FlatView(props) {\r\n  return (\r\n    <>\r\n      {props.devices.map((device) => {\r\n          return (\r\n            <Accordion defaultActiveKey=\"0\">\r\n              <Accordion.Item eventKey=\"0\">\r\n                <Accordion.Header>\r\n                  {device.deviceName} - At Port {device.portNumbers[0]}, Bus {device.busNumber}\r\n                </Accordion.Header>\r\n                <Accordion.Body>\r\n                  <p>\r\n                    <strong>Product ID: </strong>{\" \"}\r\n                    {device.deviceDescriptor.idProduct}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Vendor ID: </strong>\r\n                    {device.deviceDescriptor.idVendor}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Bus: </strong>\r\n                    {device.busNumber}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Port: </strong>\r\n                    {device.portNumbers[0]}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Descriptor: </strong>\r\n                    {device.manufacturer}\r\n                  </p>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>\r\n          );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FlatView;\r\n","import Accordion from \"react-bootstrap/Accordion\";\r\n\r\nfunction TypeView(props) {\r\n  //stole this from SO, don't ask me about it\r\n  var groupBy = function (xs, key) {\r\n    return xs.reduce(function (rv, x) {\r\n      (rv[x[key]] = rv[x[key]] || []).push(x);\r\n      return rv;\r\n    }, {});\r\n  };\r\n\r\n  let types = [];\r\n  let typesTemp = groupBy(props.devices, \"manufacturer\");\r\n  for (const property in typesTemp) {\r\n    types.push({ type: property, devices: typesTemp[property] });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {types.map((type) => (\r\n        <Accordion defaultActiveKey=\"0\">\r\n          <Accordion.Item eventKey=\"0\">\r\n            <Accordion.Header>Device Type - {type.type}</Accordion.Header>\r\n            <Accordion.Body>\r\n              {type.devices.map((child) => (\r\n                <Accordion>\r\n                  <Accordion.Item eventKey=\"0\">\r\n                    <Accordion.Header>{child.deviceName}</Accordion.Header>\r\n                    <Accordion.Body>\r\n                      <p>\r\n                        <strong>Product ID: </strong>{\" \"}\r\n                        {child.deviceDescriptor.idProduct}\r\n                      </p>\r\n                      <p>\r\n                        <strong>Vendor ID: </strong>\r\n                        {child.deviceDescriptor.idVendor}\r\n                      </p>\r\n                      <p>\r\n                        <strong>Port: </strong>\r\n                        {child.portNumbers[0]}\r\n                      </p>\r\n                    </Accordion.Body>\r\n                  </Accordion.Item>\r\n                </Accordion>\r\n              ))}\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n        </Accordion>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TypeView;\r\n","import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Row\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport HubView from \"./HubView\";\r\nimport BusView from \"./BusView\";\r\nimport FlatView from \"./FlatView\";\r\nimport TypeView from \"./TypeView\";\r\n\r\n\r\n\r\nfunction Devices(props) {\r\n\r\n  const [devices, setDevices] = useState([]);\r\n  const [listening, setListening] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:1337/getDevices\")\r\n      .then((res) => {\r\n        setDevices(res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    if (!listening) {\r\n      const events = new EventSource(\"http://localhost:1337/events\");\r\n\r\n      events.onmessage = (event) => {\r\n        const parsedData = JSON.parse(event.data);\r\n        setDevices(parsedData);\r\n      };\r\n      setListening(true);\r\n    }\r\n  }, [listening, devices]);\r\n\r\n  let view;\r\n\r\n  if (props.viewType === 'hub') {\r\n    view = <HubView devices={devices}></HubView>\r\n  }\r\n  if (props.viewType === 'type') {\r\n    view = <TypeView devices={devices}></TypeView>\r\n  }\r\n  if (props.viewType === 'bus') {\r\n    view = <BusView devices={devices}></BusView>\r\n  }\r\n  if (props.viewType === 'flat') {\r\n    view = <FlatView devices={devices}></FlatView>\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <Alert key=\"primary\" variant=\"primary\">\r\n            Your USB Devices are listed below. You can toggle view types from the navbar.\r\n          </Alert>\r\n          {view}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Devices;\r\n","import './App.css';\r\nimport Navigation from './components/Navigation';\r\nimport Devices from './components/Devices';\r\nimport { useState } from \"react\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [viewType, setviewType] = useState(\"hub\"); \r\n\r\n  return (\r\n    <>\r\n      <Navigation onChangeView={(newView)=>{setviewType(newView)}}/>\r\n      <Devices viewType = {viewType}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}